<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://test/skin/canvasbutton.css" type="text/css"?>

<window id="uiEditorWindow"
        orient="vertical"
        align="stretch"
        onload="initEditor()"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="application/x-javascript">
    <![CDATA[
    var gEditorElem = null;
    var gEditor     = null;

    var DOMSerialiser = {
        /**
         * Serialises to stdout the tree rooted at the passed node.
         *
         * @param  {nsIDOMNode} aNode the root of the tree to serialise
         * @return {Undefined}  does not have a return value
         */
        serialiseDOMTree: function (aNode) {
            var child = null;

            DOMSerialiser.emitNodeStart(aNode);

            for (child = aNode.firstChild; child != null; child = child.nextSibling) {
                DOMSerialiser.serialiseDOMTree(child);
            }

            DOMSerialiser.emitNodeEnd(aNode);
        },

        /**
         * Emits a textual representation of the passed DOM node.
         *
         * This method should be called before the subtree of the
         * node is visited.
         *
         * @param  {nsIDOMNode} aNode the node to serialise
         * @return {Undefined}  does not have a return value
         */
        emitNodeStart: function (aNode) {
            switch (aNode.nodeType) {
                case Components.interfaces.nsIDOMNode.ELEMENT_NODE:
                    dump("<" + aNode.nodeName);

                    if (aNode.hasAttributes()) {
                        // emit the attributes
                        for (var i = 0; i < aNode.attributes.length; i++) {
                            dump(" " + aNode.attributes.item(i).nodeName + "=\"" + aNode.attributes.item(i).nodeValue + "\"");
                        }
                    }

                    if (aNode.hasChildNodes()) {
                        dump(">");
                    } else {
                        dump("/>");
                    }
                    break;
                case Components.interfaces.nsIDOMNode.TEXT_NODE:
                    dump(aNode.nodeValue);
                    break;
                case Components.interfaces.nsIDOMNode.PROCESSING_INSTRUCTION_NODE:
                    dump("<?" + aNode.target + " " + aNode.data + "?>");
                    break;
                case Components.interfaces.nsIDOMNode.COMMENT_NODE:
                    dump("<!--" + aNode.nodeValue + "-->");
                    break;
                case Components.interfaces.nsIDOMNode.DOCUMENT_NODE:
                    // the document itself; nothing to emit here
                    break;
                case Components.interfaces.nsIDOMNode.DOCUMENT_TYPE_NODE:
                    // TODO: emit notations (see http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-412266927)
                    dump("<!DOCTYPE " + aNode.name + (aNode.publicId ? " PUBLIC \"" + aNode.publicId + "\" " : " ")  + "\"" + aNode.systemId + "\">\n");
                    break;
                case Components.interfaces.nsIDOMNode.DOCUMENT_FRAGMENT_NODE:
                    // for all child nodes of the fragment, emit their trees
                    dump("fragment: ");
                    break;
                default:
                    dump("UNKNOWN node \"" + aNode.nodeName + "\" of node type \"" + aNode.nodeType + "\" encountered\n");
            }
        },

        /**
         * Emits a textual representation of the passed DOM node.
         *
         * This method should be called after the subtree of the
         * node was visited.
         *
         * @param  {nsIDOMNode} aNode the node to serialise
         * @return {Undefined}  does not have a return value
         */
        emitNodeEnd: function (aNode) {
            switch (aNode.nodeType) {
                case 1:
                    if (aNode.hasChildNodes()) {
                        dump("</" + aNode.nodeName + ">");
                    }
                    break;
                default:
            }
        }
    };

    function initEditor() {
        dump("\n\n\ninitEditor() invoked\n");
        // test dynamic tab insertion
        var editorWindow             = null;
        var editorElem               = null;

        editorElem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "editor");
        editorElem.setAttribute("type", "content");
        editorElem.setAttribute("flex", "1");
        editorElem.setAttribute("style", "border: 2px solid black; margin: 2px 2px 2px 2px;");
        editorElem.setAttribute("onload", "event.stopPropagation()");

        editorWindow = document.getElementById("uiEditorWindow");
        editorWindow.appendChild(editorElem);

        gEditorElem = editorElem;

        window.setTimeout(continueInit, 100);
    }

    function continueInit() {
        dump("continueInit() invoked (chocked initialisation)\n");

        var editorElem = gEditorElem;

        // set up
        editorElem.makeEditable("html", false);

        gEditor = editorElem.getEditor(editorElem.contentWindow);
        gEditor.QueryInterface(Components.interfaces.nsIHTMLEditor);

        editorElem.contentWindow.addEventListener("keypress", function (event) { event.stopPropagation(); }, true);

        editorElem.contentWindow.addEventListener("focus", function (event) { dump("editorElem.contentWindow received focus\n"); }, true);
        editorElem.addEventListener("focus", function (event) { dump("editorElem received focus\n"); }, true);

        // add selection listener
        editorElem.contentWindow.getSelection().QueryInterface(Components.interfaces.nsISelectionPrivate).addSelectionListener(new WidgetUpdateSelectionListener());

        dump("editorElem status = \"" + editorElem.editingSession.editorStatus  + "\"\n");
        dump("is editable = \"" + gEditor.isDocumentEditable  + "\"\n");
    }

    var gCommandList = [["cmd_yulup_widget_bold",   "b"],
                          ["cmd_yulup_widget_italic", "i"],
                          ["cmd_yulup_widget_tt",     "tt"]];

    function WidgetUpdateSelectionListener() {}

    WidgetUpdateSelectionListener.prototype = {
        notifySelectionChanged: function (aDocument, aSelection, aReason) {
            ///* DEBUG */ dump("Yulup:domops-test.js:WidgetUpdateSelectionListener.notifySelectionChanged() invoked\n");

            updateCommandActiveStates(aSelection);
        }
    };

    function updateCommandActiveStates(aSelection) {
        // check all commands
        if (aSelection.isCollapsed) {
            for (var i = 0; i < gCommandList.length; i++) {
                if (pathToRootContains(gCommandList[i][1], aSelection.focusNode)) {
                    dump("Yulup:domops-test.js:WidgetUpdateSelectionListener.notifySelectionChanged: \"" + gCommandList[i][0] + "\" command active\n");

                    // hack to refire command update
                    document.getElementById(gCommandList[i][0]).removeAttribute("active");
                    document.getElementById(gCommandList[i][0]).setAttribute("active", "true");
                } else {
                    document.getElementById(gCommandList[i][0]).removeAttribute("active");
                }
            }
        }
    }

    function addText() {
        gEditor.insertHTML("<span>1234567891234<b>boldbold</b>foooo<i>italicitalic</i>1234567891234</span>");
    }

    function doUndo() {
        dump("NOT IMPLEMENTED\n");
    }

    function doRedo() {
        dump("NOT IMPLEMENTED\n");
    }

    function printDOMTree() {
        dump("printDOMTree() invoked\n");
        DOMSerialiser.serialiseDOMTree(gEditor.document);
        dump("\n");
    }

    function doBold() {
        dump("doBold() invoked\n");

        //document.getElementById("uiYulupBold").checkState = 2;
        doSurroundCmd(gEditor.selection, gEditor.document.createElement("b"));
    }

    function doItalic() {
        dump("doItalic() invoked\n");

        doSurroundCmd(gEditor.selection, gEditor.document.createElement("i"));
    }

    function doTT() {
        var selection = null;

        dump("doTT() invoked\n");

        doSurroundCmd(gEditor.selection, gEditor.document.createElement("tt"));
    }

    function doSurroundCmd(aSelection, aElement) {
        var textNode   = null;
        var splitNode  = null;
        var parentNode = null;
        var range      = null;
        var commonAncestor = null;

        dump("doSurroundCmd(\"" + aSelection + "\", \"" + aElement.nodeName + "\") invoked\n");

        // check if the selection is collaped
        if (!aSelection.isCollapsed && aSelection.rangeCount > 0) {
            // selection not collapsed
            dump("selection = \"" + aSelection + "\"\n");

            surroundRange(aSelection, aElement);
        } else {
            // hmmmmm, selection is collapsed
            dump("selection is collapsed\n");

            // check if we are in a context which is surrounded by the given element already
            if ((commonAncestor = pathToRootContains(aElement.nodeName, aSelection.focusNode)) != null) {
                /* Selection is collapsed, and we are contained in the given element, therefore we
                 * need to split the tree above us. */
                dump("element \"" + aElement.nodeName + "\" already contained on the path to root at \"" + commonAncestor + "\"\n");

                dump("offset = \"" + aSelection.focusOffset + "\", focuse node name = \"" + aSelection.focusNode.nodeName + "\", focus node = ");
                DOMSerialiser.serialiseDOMTree(aSelection.focusNode);
                dump("\n");

                /* Check if our parent is the element we are looking for, and the only
                   children are empty text nodes. If this is the case, we can simply remove the parent. */
                if (aSelection.focusNode.parentNode == commonAncestor) {
                    var removeAncestor = true;

                    for (var i = 0; i < commonAncestor.childNodes.length; i++) {
                        if (commonAncestor.childNodes.item(i).nodeType != Components.interfaces.nsIDOMNode.TEXT_NODE) {
                            removeAncestor = false;
                            break;
                        } else {
                            if (commonAncestor.childNodes.item(i).QueryInterface(Components.interfaces.nsIDOMCharacterData).length != 0) {
                                removeAncestor = false;
                                break;
                            }
                        }
                    }
                }

                if (!removeAncestor) {
                    var leftMostChild  = getLeftMostElementChild(commonAncestor);
                    var rightMostChild = getRightMostElementChild(commonAncestor);

                    // create left splitting range
                    var leftSplittingRange = gEditor.document.createRange();
                    leftSplittingRange.setStartBefore(leftMostChild);
                    leftSplittingRange.setEnd(aSelection.focusNode, aSelection.focusOffset);

                    // create right splitting range
                    var rightSplittingRange = gEditor.document.createRange();
                    rightSplittingRange.setStart(aSelection.focusNode, aSelection.focusOffset);
                    rightSplittingRange.setEndAfter(rightMostChild);

                    var leftSplittingFragment  = leftSplittingRange.cloneContents();
                    var rightSplittingFragment = rightSplittingRange.cloneContents();

                    // dump it
                    dump("left splitting fragment =\n");
                    DOMSerialiser.serialiseDOMTree(leftSplittingFragment);
                    dump("\n");

                    dump("right splitting fragment =\n");
                    DOMSerialiser.serialiseDOMTree(rightSplittingFragment);
                    dump("\n");

                    // create a new text node where the selection will be placed after the operation
                    textNode = gEditor.document.createTextNode("");

                    // recreate the chain to the ancestor
                    var clonedChain = cloneChainToAncestor(aSelection.focusNode, aSelection.focusOffset, commonAncestor, textNode);
                    dump("cloned chain =\n");
                    DOMSerialiser.serialiseDOMTree(clonedChain);
                    dump("\n");

                    // create new document fragment to assemble our split subtree
                    var replacementFragment = gEditor.document.createDocumentFragment();
                    replacementFragment.appendChild(leftSplittingFragment);
                    replacementFragment.appendChild(clonedChain);
                    replacementFragment.appendChild(rightSplittingFragment);

                    dump("replacement fragment =\n");
                    DOMSerialiser.serialiseDOMTree(replacementFragment);
                    dump("\n");

                    commonAncestor.parentNode.replaceChild(replacementFragment, commonAncestor);

                    // move selection into the freshly created text node
                    aSelection.collapse(textNode, 0);
                } else {
                    // simply remove the ancestor
                    dump("removing common ancestor\n");

                    commonAncestor.parentNode.removeChild(commonAncestor);
                }
            } else {

                // check if we are in a text node
                if (aSelection.anchorNode.nodeType == Components.interfaces.nsIDOMNode.TEXT_NODE) {
                    dump("insert node \"" + aElement.nodeName + "\"\n");

                    // TODO: call beginTransaction()

                    // TODO: use nsIEditor methods to manipulate nodes

                    // prepare node to insert
                    textNode = aElement.ownerDocument.createTextNode("");
                    aElement.appendChild(textNode);

                    // split text node
                    splitNode = aSelection.anchorNode.splitText(aSelection.anchorOffset);

                    // insert new element before split result
                    parentNode = splitNode.parentNode;
                    parentNode.insertBefore(aElement, splitNode);

                    // move selection into the text child of the newly inserted node
                    // c.f. http://lxr.mozilla.org/mozilla1.8.0/source/editor/libeditor/base/InsertElementTxn.cpp#129
                    /*
                      range = parentNode.ownerDocument.createRange();
                      range.selectNode(textNode);
                      aSelection.removeAllRanges();
                      aSelection.addRange(range);
                      gEditor.selectionController.characterMove(true, false);
                    */
                    aSelection.collapse(textNode, 0);

                    // TODO: call endTransaction()

                    // set focus
                    gEditorElem.contentWindow.focus();
                }
            }
        }

        updateCommandActiveStates(gEditor.selection);
    }

    function surroundRange(aSelection, aElement) {
        var range    = null;
        var ancestor = null;

        dump("surroundRange(\"" + aSelection + "\", \"" + aElement.nodeName + "\") invoked\n");

        // get range
        range = aSelection.getRangeAt(0);

        //range.surroundContents(aElement);

        ancestor = range.commonAncestorContainer;

        dump("common ancestor = \"" + ancestor + "\"\n");

        if (ancestor.nodeType == Components.interfaces.nsIDOMNode.TEXT_NODE) {
            /* If the common ancestor is a text node, then the
             * selection is entirely contained in the same node. */
            surroundText(ancestor, range, aElement);
        } else {
            // TODO: not implemented
            dump("NOT IMPLEMENTED\n");
            /*
            while (ancestor.firstChild) {
                aElement.appendChild(ancestor.firstChild);
            }
            ancestor.appendChild(aElement);
            */
        }
    }

    function surroundTree(aRange, aElement) {
        // get deepest common ancestor from aRange
        //commonAncestor = 

        // get deepest common ancestor child on the way from the start node up

        // get deepest common ancestor child on the way from the end node up

        // get right sibling of the node above
        //newRightSibling = 

        // move all deepest common ancestor children between these two nodes (including them) under the to be inserted parent

        // insert new parent before newRightSibling
        if (newRightSibling) {
            commonAncestor.insertBefore(aElement, newRightSibling);
        } else {
            commonAncestor.appendChild(aElement);
        }

        // remove all elements of type aElement from the subtrees formed by the children of aElement

        // TODO: this algorithm does not deal with start and end node splitting!
        // reduce start and end node cases to surroundText!
    }

    function surroundText(aTextNode, aRange, aElement) {
        var startOffset = null;
        var endOffset   = null;
        var parentNode  = null;
        var targetNode  = null;

        /* DEBUG */ dump("surroundText(\"" + aTextNode.nodeName + "\", \"" + aRange + "\", \"" + aElement.nodeName + "\") invoked\n");

        // start offset is guaranteed to never be after the end position
        startOffset = aRange.startOffset;
        endOffset   = aRange.endOffset;

        /* DEBUG */ dump("startOffset = " + startOffset + "\n");
        /* DEBUG */ dump("endOffset = " + endOffset + "\n");

        parentNode = aTextNode.parentNode;

        /* DEBUG */ printChildNodeList(parentNode);

        if (startOffset != 0) {
            targetNode = aTextNode.splitText(startOffset);
        } else {
            targetNode = aTextNode;
        }

        if (targetNode.length != endOffset - startOffset) {
            targetNode.splitText(endOffset - startOffset);
        }

        /* DEBUG */ printChildNodeList(parentNode);

        parentNode.replaceChild(aElement, targetNode);
        aElement.appendChild(targetNode);

        /* DEBUG */ printChildNodeList(parentNode);
    }

    /*
    function surroundText2(aTextNode, aRange, aElement) {
        var tmpObj      = { value: null };
        var startOffset = null;
        var endOffset   = null;
        var parentNode  = null;
        var midlleNode  = null;
        var leftNode    = null;

        dump("surroundText(\"" + aTextNode.nodeName + "\", \"" + aRange + "\", \"" + aElement.nodeName + "\") invoked\n");

        // start offset is guaranteed to never be after the end position
        startOffset = aRange.startOffset;
        endOffset   = aRange.endOffset;

        parentNode = aTextNode.parentNode;

        printChildNodeList(parentNode);

        // split text node
        gEditor.splitNode(aTextNode, endOffset, tmpObj);
        middleNode = tmpObj.value;

        tmpObj.value = null;
        gEditor.splitNode(middleNode, startOffset, tmpObj);
        leftNode = tmpObj.value;

        parentOffset = calculateParentOffset(middleNode);

        dump("parent offset = " + parentOffset + "\n");

        printChildNodeList(parentNode);

        if (!parentOffset)
            return;

        gEditor.deleteNode(middleNode);

        printChildNodeList(parentNode);

        // this does not work because the rule sniffer will not alllow us to insert e.g. <B>!!
        gEditor.insertNode(aElement, parentNode, parentOffset);

        printChildNodeList(parentNode);

        gEditor.insertNode(middleNode, aElement, 0);

        printChildNodeList(parentNode);
    }
    */

    function pathToRootContains(aElementName, aStartNode) {
        var elemName = null;
        var node     = null;

        ///* DEBUG */ dump("Yulup:domops-test.js:pathToRootContains(\"" + aElementName + "\", \"" + aStartNode + "\") invoked\n");

        elemName = aElementName.toLowerCase();
        node     = aStartNode;

        while (node) {
            if (node.nodeType == Components.interfaces.nsIDOMNode.ELEMENT_NODE &&
                node.localName.toLowerCase() == elemName)
                return node;

            node = node.parentNode;
        }

        return null;
    }

    function getLeftMostElementChild(aCommonAncestor) {
        var node = null;

        node = aCommonAncestor;

        while (node.firstChild && (node.firstChild.nodeType != Components.interfaces.nsIDOMNode.TEXT_NODE)) {
            node = node.firstChild;
        }

        return node;
    }

    function getRightMostElementChild(aCommonAncestor) {
        var node = null;

        node = aCommonAncestor;

        while (node.lastChild && (node.lastChild.nodeType != Components.interfaces.nsIDOMNode.TEXT_NODE)) {
            node = node.lastChild;
        }

        return node;
    }

    function cloneChainToAncestor(aLeafNode, aLeafNodeOffset, aTerminationNode, aNewLeaf) {
        var currentNode = null;
        var chainRoot   = null;
        var clonedNode  = null;

        /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor(\"" + aLeafNode + "\", \"" + aLeafNodeOffset + "\", \"" + aTerminationNode.nodeName + "\", \"" + aNewLeaf + "\") invoked\n");

        if (aLeafNode.nodeType == Components.interfaces.nsIDOMNode.TEXT_NODE) {
            // our leaf node is a text node, therefore the offset points into the text

            /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: leaf node is of type TEXT_NODE\n");
            currentNode = aLeafNode.parentNode;
        } else {
            // our leaf node is not a text node, therefore the offset points to a child node (not sure about that though!)
            if (aLeafNode.childNodes.length > aLeafNodeOffset) {
                /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: leaf node is not a text node; offset is ok\n");
                currentNode = aLeafNode.childNodes.item(aLeafNodeOffset);
            } else {
                /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: leaf node is not a text node; offset is greater than child nodee length\n");
                currentNode = aLeafNode.lastChild;
            }
        }

        chainRoot = aNewLeaf;

        /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: start node for walking upwards is \"" + currentNode.nodeName + "\"\n");

        while (currentNode != aTerminationNode) {
            /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: visiting node \"" + currentNode.nodeName + "\"\n");

            clonedNode = currentNode.cloneNode(false);

            /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: cloned node is \"" + clonedNode.nodeName + "\"\n");

            clonedNode.appendChild(chainRoot);
            chainRoot = clonedNode;

            currentNode = currentNode.parentNode;
        }

        /* DEBUG */ dump("Yulup:domops-test.js:cloneChainToAncestor: chain root node is \"" + chainRoot.nodeName + "\"\n");

        return chainRoot;
    }

    function printChildNodeList(aNode) {
        dump("child nodes of \"" + aNode.nodeName + "\" (" + aNode.childNodes.length + ")");
        for (var i = 0; i < aNode.childNodes.length; i++) {
            if (aNode.childNodes.item(i).nodeType == Components.interfaces.nsIDOMNode.TEXT_NODE) {
                dump(" \"" + aNode.childNodes.item(i).nodeName + " (" + aNode.childNodes.item(i).data + ")\"");
            } else {
                dump(" \"" + aNode.childNodes.item(i).nodeName + "\"");
            }
        }
        dump("\n");
    }

    function calculateParentOffset(aChildNode) {
        var offset = null;

        dump("calculateParentOffset(\"" + aChildNode.nodeName + "\") invoked\n");

        if (aChildNode.parentNode) {
            for (var i = 0; i < aChildNode.parentNode.childNodes.length; i++) {
                if (aChildNode.parentNode.childNodes.item(i) == aChildNode) {
                    offset = i;
                    break;
                }
            }
        } else
            dump("poor child has no parent\n");

        return offset;
    }
    ]]>
  </script>

  <commandset id="uiWidgetCommandSet">
    <command id="cmd_yulup_widget_bold"   oncommand="doBold()"/>
    <command id="cmd_yulup_widget_italic" oncommand="doItalic()"/>
    <command id="cmd_yulup_widget_tt"     oncommand="doTT()"/>
  </commandset>

  <toolbar id="uiToolbar">
    <button label="Add Text" oncommand="addText()"/>
    <button label="Print Tree" oncommand="printDOMTree()"/>
    <canvasbutton id="uiYulupBold"   label="Bold"   command="cmd_yulup_widget_bold"   image="chrome://test/skin/bold.png"/>
    <canvasbutton id="uiYulupItalic" label="Italic" command="cmd_yulup_widget_italic" image="chrome://test/skin/bold.png"/>
    <canvasbutton id="uiYulupTT"     label="Mono"   command="cmd_yulup_widget_tt"     image="chrome://test/skin/bold.png"/>
    <button id="uiYulupUndo"   label="Undo"   oncommand="doUndo()"/>
    <button id="uiYulupRedo"   label="Redo"   oncommand="doRedo()"/>
  </toolbar>

</window>
