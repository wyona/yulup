<?xml version="1.0"?>

<!--
# ***** BEGIN LICENSE BLOCK *****
# Copyright 2007 Wyona AG Zurich
#
# This file is part of Yulup.
#
# Yulup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Yulup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Yulup; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# ***** END LICENSE BLOCK *****
-->

<!--
 @author Andreas Wuest
-->

<bindings id="canvasbuttonBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <binding id="canvasbutton" display="xul:button" extends="chrome://global/content/bindings/button.xml#button-base">
    <resources>
      <stylesheet src="chrome://global/skin/toolbarbutton.css"/>
    </resources>

    <content>
      <children includes="observes|template|menupopup|tooltip"/>
      <xul:deck selectedIndex="0">
        <xhtml:canvas width="24" height="24"></xhtml:canvas>
        <xhtml:canvas width="24" height="24"></xhtml:canvas>
        <xhtml:canvas width="24" height="24"></xhtml:canvas>
      </xul:deck>
      <xul:label class="toolbarbutton-text" crop="right" flex="1"
                 xbl:inherits="value=label,accesskey,crop,toolbarmode,buttonstyle"/>
    </content>

    <implementation>
      <field name="__image">
        null
      </field>

      <field name="__imagesrc">
        null
      </field>

      <field name="__state">
        0
      </field>

      <property name="image">
        <getter>
          <![CDATA[
            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.getImage() invoked\n");

            return this.__imagesrc;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            var image = null;
            var self  = this;

            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.setImage(\"" + val + "\") invoked\n");

            image = new Image();
            image.onload = function() { self.__setNewImage(); };
            image.src = val;

            this.__image = image;
          ]]>
        </setter>
      </property>

      <property name="state">
        <getter>
          <![CDATA[
            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.getState() invoked\n");

            return this.__state;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.setState(\"" + val + "\") invoked\n");

            if (0 <= val <= 2) {
                document.getAnonymousNodes(this)[0].selectedIndex = val;

                this.__state = val;
            }
          ]]>
        </setter>
      </property>

      <constructor>
        <![CDATA[
          /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.ctor() invoked\n");

          /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.ctor: disabled attribute = \"" + this.getAttribute("disabled") + "\"\n");
          /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.ctor: image attribute = \"" + this.getAttribute("image") + "\"\n");

          this.__setDisabled(this.getAttribute("disabled"));

          this.image = this.getAttribute("image");
        ]]>
      </constructor>

      <method name="__setDisabled">
        <parameter name="aValue"/>
        <body>
          <![CDATA[
            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.__setDisabled(\"" + aValue + "\") invoked\n");

            if (aValue == "true") {
                this.state = 2;
            } else {
                this.state = 0;
            }
          ]]>
        </body>
      </method>

      <method name="__setNewImage">
        <body>
          <![CDATA[
            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.__setNewImage() invoked\n");

            this.__generateNormalCanvas(this.__image);
            this.__generateActiveCanvas(this.__image);
            this.__generateInactiveCanvas(this.__image);
          ]]>
        </body>
      </method>

      <method name="__generateNormalCanvas">
        <parameter name="aImage"/>
        <body>
          <![CDATA[
            var canvas = null;

            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.__generateNormalCanvas(" + aImage + ") invoked\n");

            if (aImage) {
                canvas = document.getAnonymousNodes(this)[0].childNodes[0];

                // draw image
                canvas.getContext("2d").drawImage(aImage, 0, 0);
            }
          ]]>
        </body>
      </method>

      <method name="__generateActiveCanvas">
        <parameter name="aImage"/>
        <body>
          <![CDATA[
            var canvas  = null;
            var context = null;

            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.__generateActiveCanvas(" + aImage + ") invoked\n");

            if (aImage) {
                canvas  = document.getAnonymousNodes(this)[0].childNodes[1];
                context = canvas.getContext("2d");

                // draw image
                context.drawImage(aImage, 0, 0);

                // composite with rect
                context.globalAlpha = 0.3;
                context.fillRect(0, 0, 24, 24);
            }
          ]]>
        </body>
      </method>

      <method name="__generateInactiveCanvas">
        <parameter name="aImage"/>
        <body>
          <![CDATA[
            var canvas  = null;
            var context = null;

            /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton.__generateInactiveCanvas(" + aImage + ") invoked\n");

            if (aImage) {
                canvas  = document.getAnonymousNodes(this)[0].childNodes[2];
                context = canvas.getContext("2d");

                // draw image
                context.globalAlpha = 0.5;
                context.drawImage(aImage, 0, 0);
            }
          ]]>
        </body>
      </method>
    </implementation>

    <handlers>
      <handler event="DOMAttrModified">
        <![CDATA[
          if (event.originalTarget != this)
              return;

          switch (event.attrName) {
              case "disabled":
                  this.__setDisabled(event.newValue);
                  break;
              case "image":
                  this.image = event.newValue;
                  break;
              default:
          }
        ]]>
      </handler>

      <handler event="mousedown">
        <![CDATA[
          /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton: mousedown handler invoked\n");

          // don't switch states if we are in the inactive state
          if (this.state != 2)
              this.state = 1;
        ]]>
      </handler>

      <handler event="mouseup">
        <![CDATA[
          /* DEBUG */ dump("Yulup:canvasbutton.xml:canvasbutton: mouseup handler invoked\n");

          // don't switch states if we are in the inactive state
          if (this.state != 2)
              this.state = 0;
        ]]>
      </handler>
    </handlers>
  </binding>
</bindings>
