<?xml version="1.0"?>

<window id="uiEditorWindow"
        orient="vertical"
        align="stretch"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="application/x-javascript">
<![CDATA[
      gOutputString = "";

      function onLoadHandler() {
          var iframe1      = null;

          /* DEBUG */ dump("######## YulupTEST:httpputpost-test.js:onLoadHandler() invoked\n");

          iframe1 = document.getElementById("iframe1");

          dump("######## YulupTEST:httpputpost-test.js:onLoadHandler: iframe.contentDocument.documentElement = \"" + iframe1.contentDocument.documentElement + "\"\n");

          dump("\n");

          serialiseDOMTree(iframe1.contentDocument)

          dump(gOutputString);

          dump("\n\n");

          dump("######## YulupTEST:httpputpost-test.js:onLoadHandler: set innerHTML on iframe2\n");

          //document.getElementById("iframe2").contentDocument.childNodes[1].innerHTML = gOutputString;

          // create a data URL (see http://www.ietf.org/rfc/rfc2397)
          //var dataString = "data:application/xhtml+xml," + gOutputString;

          //document.getElementById("iframe2").setAttribute("src", dataString);

          extractPreamble(gOutputString);
      }

      function serialiseDOMTree(aNode) {
          var child = null;

          nodeStartActions(aNode);

          //dump("######## has child nodes = \"" + aNode.hasChildNodes() + "\"\n");
          //dump("######## first child node = \"" + aNode.firstChild + "\"\n");

          for (child = aNode.firstChild; child != null; child = child.nextSibling) {
              serialiseDOMTree(child);
          }

          nodeEndActions(aNode);
      }

      function nodeStartActions(aNode) {
          switch (aNode.nodeType) {
              case 1:
                  gOutputString += "<" + aNode.nodeName;

                  if (aNode.hasAttributes()) {
                      // emit the attributes
                      for (var i = 0; i < aNode.attributes.length; i++) {
                          gOutputString += " " + aNode.attributes.item(i).nodeName + "=\"" + aNode.attributes.item(i).nodeValue + "\"";
                      }
                  }

                  if (aNode.hasChildNodes()) {
                      gOutputString += ">";
                  } else {
                      gOutputString += "/>";
                  }
                  break;
              case 3:
                  gOutputString += aNode.nodeValue;
                  break;
              case 7:
                  gOutputString += "<?" + aNode.target + " " + aNode.data + "?>";
                  break;
              case 8:
                  gOutputString += "<!--" + aNode.nodeValue + "-->";
                  break;
              case 9:
                  // the document itself; nothing to emit here
                  break;
              case 10:
                  // TODO: emit notations (see http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-412266927)
                  gOutputString += "<!DOCTYPE " + aNode.name + (aNode.publicId ? " PUBLIC \"" + aNode.publicId + "\" " : " ")  + "\"" + aNode.systemId + "\">\n";
                  break;
              default:
                  dump("######## UNKNOWN node \"" + aNode.nodeName + "\" of node type \"" + aNode.nodeType + "\" encountered\n");
          }
      }

      function nodeEndActions(aNode) {
          switch (aNode.nodeType) {
              case 1:
                  if (aNode.hasChildNodes()) {
                      gOutputString += "</" + aNode.nodeName + ">";
                  }
                  break;
              default:
          }
      }

      function extractPreamble(aDocument) {
          //var regExp      = null;
          //var resultArray = new Array();
          var preamble    = null;

          // remove all comments
          /* does not work...
          regExp = new RegExp("<!--(?:(?:.|\s)*(?:.|\s)*)*?-->", "gim");
          preamble = aDocument.replace(regExp, " ");

          dump("######## comments removed =\n" + preamble + "\n");
          */

          // extract preamble
          /* does not work as well...
          regExp = new RegExp("((?:(?:.|\s)*(?:.|\s)*)*)<body>", "gim");
          resultArray = regExp.exec(preamble);
          preamble = resultArray[1];

          dump("######## preamble =\n" + preamble + "\n");
          */

          dump("######## body starts at = " + aDocument.search(/<BODY>/i) + "\n");

          preamble = aDocument.substring(0, aDocument.search(/<BODY>/i));
          dump("######## preamble =\n" + preamble + "\n");

          return preamble;
      }
]]>
  </script>

  <button id="button" label="Hello"/>
  <iframe id="iframe1" src="http://demo.yulup.wyona.org/" flex="1" style="border: 1px solid black" onload="onLoadHandler()"/>
  <iframe id="iframe2" flex="1" style="border: 1px solid black"/>

</window>
