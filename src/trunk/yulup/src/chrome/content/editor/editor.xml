<?xml version="1.0"?>

<!--
# ***** BEGIN LICENSE BLOCK *****
# Copyright 2006 Wyona AG Zurich
#
# This file is part of Yulup.
#
# Yulup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Yulup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Yulup; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# ***** END LICENSE BLOCK *****
-->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Binding for the tabbox. Provides basic services like creating new views, etc. -->

  <binding id="editortabbox"
           extends="chrome://global/content/bindings/tabbox.xml#tabbox">
    <implementation>
      <method name="getTabs">
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editortabbox.getTabs() invoked\n");
          return this.childNodes[0];
        </body>
      </method>
      <method name="getTabpanels">
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editortabbox.getTabpanels() invoked\n");
          return this.childNodes[1];
        </body>
      </method>
      <method name="createView">
        <parameter name="aViewType"/>
        <parameter name="aCommand"/>
        <parameter name="aTabLabel"/>
        <parameter name="aTooltiptext"/>
        <parameter name="aView"/>
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editortabbox.createView(\"" + aViewType + "\", \"" + aCommand + "\", \"" + aTabLabel + "\", \"" + aTooltiptext + "\", \"" + aView + "\") invoked\n");
          var tabpanel = null;
          var editview = null;
          var tab      = null;

          // create a new tabpanel and the associated view
          editview = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "editview");
          tabpanel = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "tabpanel");

          editview.setAttribute("type", aViewType);
          editview.setAttribute("flex", "1");

          tabpanel.setAttribute("flex", "1");
          tabpanel.appendChild(editview);

          // add a tab
          tab = this.getTabs().appendItem(aTabLabel, null);

          // add the tabpanel
          this.getTabpanels().appendChild(tabpanel);

          // associate the tabpanel with its tab
          tabpanel.tab = tab;

          tab.addEventListener("command", function () { aCommand(aView, aTabLabel); }, false);
          tab.setAttribute("tooltiptext", aTooltiptext);

          return editview;
        </body>
      </method>
    </implementation>
  </binding>


  <!-- Bindings for the views. Construct the views inside the tabpanels, and provide access methods. -->

  <!-- Placing element <editor> inside the sub bindings is an ugly hack. What we
       really want to do is to have it here in the basebinding, and then include
       it from the sub bindings. Unfortunately, content cannot be inherited in XBL 1. -->
  <binding id="editviewbasebinding">
  </binding>

  <binding id="editviewsource"
           extends="chrome://yulup/content/editor/editor.xml#editviewbasebinding">
    <content>
      <xul:stack align="stretch" flex="1">
        <xul:hbox align="stretch" flex="1">
          <xul:vbox style="width: 2em; border: 1px solid grey; display: none;" align="stretch"/>
          <xul:editor type="content" flex="1" style="border: 1px solid grey; background: white;" onload="this.onLoadHandler(event)"/>
        </xul:hbox>
        <xul:vbox flex="1" style="margin: 1px 1px 1px 1px; background: white; opacity: 0.99;"/>
      </xul:stack>
    </content>
    <implementation>
      <field name="__blurElem">null</field>
      <field name="__blurEnabled">true</field>
      <field name="__fadeIntervalID">null</field>
      <constructor>
        /* DEBUG */ dump("Yulup:editor.xml:editviewsource.ctor invoked\n");
        /* DEBUG */ dump("Yulup:editor.xml:editviewsource.ctor: initialisation completed\n");

        this.__blurElem = document.getAnonymousNodes(this)[0].childNodes[1];
      </constructor>
      <method name="getView">
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editviewsource.getView() invoked\n");
          return document.getAnonymousNodes(this)[0].childNodes[0].childNodes[1];
        </body>
      </method>
      <method name="toggleDisplayBlur">
        <parameter name="aCallback"/>
        <parameter name="aCallbackSelf"/>
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editviewsource.toggleDisplayBlur() invoked\n");
          if (this.__blurEnabled) {
              if (!this.__fadeIntervalID)
                  this.__fadeIntervalID = window.setInterval(this.__fadeIn, 1, this, aCallback, aCallbackSelf);
          } else {
              this.__blurElem.removeAttribute("hidden");
              this.__blurEnabled = true;
          }
        </body>
      </method>
      <method name="__fadeIn">
        <parameter name="_this_"/>
        <parameter name="aCallback"/>
        <parameter name="aCallbackSelf"/>
        <body>
          <![CDATA[
            var blur = null;

            blur = _this_.__blurElem;

            if ((blur.style.opacity - 0.3) > 0) {
                blur.style.opacity = blur.style.opacity - 0.3;
            } else {
                // cancel animation
                window.clearInterval(_this_.__fadeIntervalID);
                _this_.__fadeIntervalID = null;

                blur.setAttribute("hidden", "true");
                blur.style.opacity = 0.99;
                _this_.__blurEnabled = false;

                if (aCallback)
                    aCallback.call(aCallbackSelf);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="editviewwysiwyg"
           extends="chrome://yulup/content/editor/editor.xml#editviewbasebinding">
    <content>
      <xul:stack align="stretch" flex="1">
        <xul:hbox align="stretch" flex="1" style="background-color: white;">
          <xul:editor type="content" flex="1" style="border: 1px solid grey;" onload="this.onLoadHandler(event)"/>
        </xul:hbox>
        <xul:vbox flex="1" style="margin: 1px 1px 1px 1px; background: white; opacity: 0.99;"/>
      </xul:stack>
    </content>
    <implementation>
      <field name="__blurElem">null</field>
      <field name="__blurEnabled">true</field>
      <field name="__fadeIntervalID">null</field>
      <constructor>
        /* DEBUG */ dump("Yulup:editor.xml:editviewwysiwyg.ctor invoked\n");
        /* DEBUG */ dump("Yulup:editor.xml:editviewwysiwyg.ctor: initialisation completed\n");

        this.__blurElem = document.getAnonymousNodes(this)[0].childNodes[1];
      </constructor>
      <method name="getView">
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editviewwysiwyg.getView() invoked\n");
          return document.getAnonymousNodes(this)[0].childNodes[0].childNodes[0];
        </body>
      </method>
      <method name="toggleDisplayBlur">
        <parameter name="aCallback"/>
        <parameter name="aCallbackSelf"/>
        <body>
          /* DEBUG */ dump("Yulup:editor.xml:editviewwysiwyg.toggleDisplayBlur() invoked\n");
          if (this.__blurEnabled) {
              if (!this.__fadeIntervalID)
                  this.__fadeIntervalID = window.setInterval(this.__fadeIn, 1, this, aCallback, aCallbackSelf);
          } else {
              this.__blurElem.removeAttribute("hidden");
              this.__blurEnabled = true;
          }
        </body>
      </method>
      <method name="__fadeIn">
        <parameter name="_this_"/>
        <parameter name="aCallback"/>
        <parameter name="aCallbackSelf"/>
        <body>
          <![CDATA[
            var blur = null;

            blur = _this_.__blurElem;

            if ((blur.style.opacity - 0.3) > 0) {
                blur.style.opacity = blur.style.opacity - 0.3;
            } else {
                // cancel animation
                window.clearInterval(_this_.__fadeIntervalID);
                _this_.__fadeIntervalID = null;

                blur.setAttribute("hidden", "true");
                blur.style.opacity = 0.99;
                _this_.__blurEnabled = false;

                if (aCallback)
                    aCallback.call(aCallbackSelf);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>


  <!-- Binding for a controller element. Not in use at the moment. -->

  <binding id="editcontroller">
  </binding>


  <!-- Binding for the actual editor. Adds handlers, etc. -->

  <binding id="editor"
           extends="chrome://global/content/bindings/editor.xml#editor">
    <implementation>
      <constructor>
        /* DEBUG */ dump("Yulup:editor.xml:editor.ctor invoked\n");
        /* DEBUG */ dump("Yulup:editor.xml:editor.ctor: initialisation completed\n");
      </constructor>
      <method name="onLoadHandler">
        <parameter name="aEvent"/>
        <body>
          var editorEvent = null;

          /* DEBUG */ dump("Yulup:editor.xml:editor.onLoadHandler(\"" + aEvent + "\") invoked\n");
          /* DEBUG */ dump("Yulup:editor.xml:editor.onLoadHandler: event type = \"" + aEvent.type + "\", event target = \"" + aEvent.target + "\", current target = \"" + aEvent.currentTarget + "\", current target name = \"" + aEvent.currentTarget.tagName + "\"\n");

          aEvent.stopPropagation();

          editorEvent = document.createEvent("Event");
          editorEvent.initEvent("editorinit", true, false);

          this.dispatchEvent(editorEvent);
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
