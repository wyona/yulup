<?xml version="1.0"?>

<!--
# ***** BEGIN LICENSE BLOCK *****
# Copyright 2006 Wyona AG Zurich
#
# This file is part of Yulup.
#
# Yulup is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Yulup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Yulup; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# ***** END LICENSE BLOCK *****
-->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <!-- Binding for the Atom sidebar. -->
  <binding id="atomsidebar">
    <implementation>
      <field name="appIntrospection">null</field>
      <field name="workspacesMenulist">null</field>
      <field name="collectionsMenulist">null</field>
      <field name="currentFeedID">null</field>
      <field name="currentFeed">null</field>

      <method name="reload">
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.reload() invoked\n");

          AtomSidebar.reInit();
        </body>
      </method>

      <method name="fillSidebar">
        <parameter name="aAPPIntrospection"/>
        <body>
          <![CDATA[
            var workspaces          = null;
            var collections         = null;
            var atomFeed            = null;
            var atomTreeView        = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.fillSidebar(\"" + aAPPIntrospection + "\") invoked\n");

            if (aAPPIntrospection) {
               this.appIntrospection = aAPPIntrospection;

               this.workspacesMenulist  = document.getElementById("uiYulupAtomSidebarWorkspaceMenulist");
               this.collectionsMenulist = document.getElementById("uiYulupAtomSidebarCollectionMenulist");

               // hide workspaces and collections drop-down menus
               this.workspacesMenulist.setAttribute("hidden", "true");
               this.collectionsMenulist.setAttribute("hidden", "true");

               // remove all workspaces and all collections
               this.workspacesMenulist.selectedIndex = -1;
               this.workspacesMenulist.removeAllItems();
               this.collectionsMenulist.selectedIndex = -1;
               this.collectionsMenulist.removeAllItems();

               // add available workspaces
               workspaces = this.appIntrospection.getWorkspaces();
               for (var i = 0; i < workspaces.length; i++) {
                   this.workspacesMenulist.appendItem(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarWorkspace.label") + " \"" + workspaces[i] + "\"", null, null);
               }

               // select first workspace if available
               if (workspaces.length != 0) {
                   this.workspacesMenulist.selectedIndex = 0;

                   // add available collections for first workspace
                   collections = this.appIntrospection.getCollectionsForWorkspace(0);
                   for (var i = 0; i < collections.length; i++) {
                       this.collectionsMenulist.appendItem(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarCollection.label") + " \"" + collections[i] + "\"", null, null);
                   }

                   // select first collection
                   if (collections.length != 0) {
                       this.collectionsMenulist.selectedIndex = 0;
                   } else {
                       this.collectionsMenulist.selectedIndex = -1;
                   }
               } else {
                   this.workspacesMenulist.selectedIndex = -1;
               }

               // show workspaces and collections drop-down menus
               this.workspacesMenulist.removeAttribute("hidden");
               this.collectionsMenulist.removeAttribute("hidden");

               this.showSidebarContent(true);

               if (workspaces.length != 0 && collections.length != 0) {
                   this.updateFeed();
               }
            } else {
                // no APP service document available
                this.showSidebarContent(false);
            }
          ]]>
        </body>
      </method>

      <method name="updateCollections">
        <parameter name="aWorkspaceIndex"/>
        <body>
          <![CDATA[
            var collections = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.updateCollections(\"" + aWorkspaceIndex + "\") invoked\n");

            // remove all collections
            this.collectionsMenulist.selectedIndex = -1;
            this.collectionsMenulist.removeAllItems();

            // add available collections for given workspace
            collections = this.appIntrospection.getCollectionsForWorkspace(aWorkspaceIndex);
            for (var i = 0; i < collections.length; i++) {
                this.collectionsMenulist.appendItem(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarCollection.label") + " \"" + collections[i] + "\"", null, null);
            }

            // select first collection
            if (collections.length != 0) {
                this.collectionsMenulist.selectedIndex = 0;
            } else {
                this.collectionsMenulist.selectedIndex = -1;
            }
          ]]>
        </body>
      </method>

      <method name="updateFeed">
        <parameter name="aCollectionIndex"/>
        <body>
          <![CDATA[
            var atomFeed     = null;
            var atomTreeView = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.updateFeed(\"" + aCollectionIndex + "\") invoked\n");

            this.showLoading();

            try {
                atomFeed = this.appIntrospection.getFeedForCollection(this.workspacesMenulist.selectedIndex, this.collectionsMenulist.selectedIndex);
                if (atomFeed) {
                    this.currentFeedID = atomFeed.feedID;
                    this.currentFeed   = atomFeed;
                    atomFeed.loadFeed(this.feedReady, this);
                } else {
                    // show feed error message deck
                    this.showFeed(false);

                    document.getElementById("uiYulupAtomSidebarFeedEntriesTree").view = null;
                }
            } catch (exception) {
                // feed or tree view not available
                /* DEBUG */ YulupDebug.dumpExceptionToConsole("Yulup:atomsidebar.xml:atomsidebar.updateFeed", exception);
                Components.utils.reportError(exception);

                // show feed error message deck
                this.showFeed(false);

                document.getElementById("uiYulupAtomSidebarFeedEntriesTree").view = null;
            }
          ]]>
        </body>
      </method>

      <method name="feedReady">
        <parameter name="aAtomFeed"/>
        <body>
            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.feedReady(\"" + aAtomFeed + "\") invoked\n");

           /* Make sure that the feed we should display is actually the feed the user
            * has currently selected. Because if the network is slow, and the user
            * switches feeds while we are loading, the previous feed would overwrite the
            * current feed. If the feed IDs don't match, we simply discard the feed. */
            if (this.currentFeedID == aAtomFeed.feedID) {
                if (aAtomFeed.isFeedOk()) {
                    this.populateFeedInformation(aAtomFeed);

                    // show feed information deck
                    this.showFeed(true);

                    // check if feed has any entries
                    if (aAtomFeed.getNumberOfEntries() > 0) {
                        // get the tree view for the feed
                        atomTreeView = new AtomTreeView(aAtomFeed);

                        // show feed entries deck
                        this.showEntries(true);

                        // display the feed
                        /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.feedReady: display the feed, atomTreeView = \"" + atomTreeView + "\"\n");

                        document.getElementById("uiYulupAtomSidebarFeedEntriesTree").view = atomTreeView;
                    } else {
                        /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.feedReady: feed has no entries\n");

                        // feed has no entries, show feed entries error message deck
                        this.showEntries(false);

                        document.getElementById("uiYulupAtomSidebarFeedEntriesTree").view = null;
                    }
                } else {
                    /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.feedReady: feed not available\n");

                    // no feed available, show feed error message deck
                    this.showFeed(false);

                    document.getElementById("uiYulupAtomSidebarFeedEntriesTree").view = null;
                }
            }
        </body>
      </method>

      <method name="populateFeedInformation">
        <parameter name="aFeed"/>
        <body>
          <![CDATA[
            var feedInfo          = null;
            var feedInfoBox       = null;
            var feedInfoContainer = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.populateFeedInformation(\"" + aFeed + "\") invoked\n");

            feedInfoContainer = document.getElementById("uiYulupAtomSidebarFeedInfoBox");

            // remove old children
            while(feedInfoContainer.contentDocument.firstChild.hasChildNodes())
                feedInfoContainer.contentDocument.firstChild.removeChild(feedInfoContainer.contentDocument.firstChild.firstChild);

            try {
                feedInfo = aFeed.getFeedInformation();

                feedInfoBox = this.__buildFeedInfoBox(feedInfo);

                // append the new box to the iframe
                feedInfoContainer.contentDocument.firstChild.appendChild(feedInfoBox);
            } catch (exception) {
                // preliminary error reporting
                alert(exception);
            }
          ]]>
        </body>
      </method>

      <method name="__buildFeedInfoBox">
        <parameter name="aAtomFeedInfo"/>
        <body>
          <![CDATA[
            var contentBox    = null;
            var generatorText = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.__buildFeedInfoPanel(\"" + aAtomFeedInfo + "\") invoked\n");

            contentBox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");

            if (aAtomFeedInfo.title && aAtomFeedInfo.title.text)
                contentBox.appendChild(this.__createTextConstructDescriptionElem("atom-feed-title", aAtomFeedInfo.title));

            if (aAtomFeedInfo.subtitle && aAtomFeedInfo.subtitle.text)
                contentBox.appendChild(this.__createTextConstructDescriptionElem("atom-feed-subtitle", aAtomFeedInfo.subtitle));

            if (aAtomFeedInfo.rights && aAtomFeedInfo.rights.text)
                contentBox.appendChild(this.__createTextConstructDescriptionElem("atom-rights", aAtomFeedInfo.rights));

            if (aAtomFeedInfo.authors.length > 0)
                if (aAtomFeedInfo.authors.length == 1) {
                    contentBox.appendChild(this.__createMultiPersonGroupbox(aAtomFeedInfo.authors, document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxAuthor.label") + ":"));
                } else {
                    contentBox.appendChild(this.__createMultiPersonGroupbox(aAtomFeedInfo.authors, document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxAuthors.label") + ":"));
                }

            if (aAtomFeedInfo.contributors.length > 0)
                if (aAtomFeedInfo.contributors.length == 1) {
                    contentBox.appendChild(this.__createMultiPersonGroupbox(aAtomFeedInfo.contributors, document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxContributor.label") + ":"));
                } else {
                    contentBox.appendChild(this.__createMultiPersonGroupbox(aAtomFeedInfo.contributors, document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxContributors.label") + ":"));
                }

            if (aAtomFeedInfo.generator && aAtomFeedInfo.generator.text) {
                generatorBox = contentBox.appendChild(this.__createLabelledBoxElement(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxGenerator.label") + ":"));

                if (aAtomFeedInfo.generator.version) {
                    generatorText = aAtomFeedInfo.generator.text + " (" + aAtomFeedInfo.generator.version + ")";
                } else {
                    generatorText = aAtomFeedInfo.generator.text;
                }

                if (aAtomFeedInfo.generator.uri) {
                    generatorBox.appendChild(this.__createURIDescriptionElement("atom-value", aAtomFeedInfo.generator.uri.spec, generatorText));
                } else {
                    generatorBox.appendChild(this.__createSimpleTextDescriptionElement("atom-value", generatorText));
                }

                contentBox.appendChild(generatorBox);
            }

            if (aAtomFeedInfo.categories.length > 0) {
                if (aAtomFeedInfo.categories.length == 1) {
                    categoryBox = contentBox.appendChild(this.__createLabelledBoxElement(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxCategory.label") + ":"));
                } else {
                    categoryBox = contentBox.appendChild(this.__createLabelledBoxElement(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxCategories.label") + ":"));
                }
                categoryBox.appendChild(this.__createCategoryDescriptionElement(aAtomFeedInfo.categories));

                contentBox.appendChild(categoryBox);
            }

            if (aAtomFeedInfo.updated) {
                updatedBox = contentBox.appendChild(this.__createLabelledBoxElement(document.getElementById("uiYulupAtomSidebarStringbundle").getString("atomSidebarFeedInformationBoxUpdated.label") + ":"));
                updatedBox.appendChild(this.__createSimpleTextDescriptionElement("atom-value", aAtomFeedInfo.updated.date));

                contentBox.appendChild(updatedBox);
            }

            return contentBox;
          ]]>
        </body>
      </method>

      <method name="__createTextConstructDescriptionElem">
        <parameter name="aClass"/>
        <parameter name="aText"/>
        <body>
          <![CDATA[
            var description = null;

            description = this.__createDescriptionElement(aClass);

            switch (aText.type) {
                case "xhtml":
                case "html":
                    description.innerHTML = aText.text;
                    break;
                case "text":
                default:
                    description.appendChild(document.createTextNode(aText.text));
            }

            return description;
          ]]>
        </body>
      </method>

      <method name="__createMultiPersonGroupbox">
        <parameter name="aPersonConstructs"/>
        <parameter name="aLabel"/>
        <body>
          <![CDATA[
            var personGroupbox = null;

            personGroupbox = this.__createGroupboxElement(aLabel);

            for (var i = 0; i < aPersonConstructs.length; i++) {
                personGroupbox.appendChild(this.__createPersonConstructBox(aPersonConstructs[i]));

                if (i + 1 != aPersonConstructs.length)
                    personGroupbox.appendChild(this.__createSeparatorElement("atom-person-separator"));
            }

            return personGroupbox;
          ]]>
        </body>
      </method>

      <method name="__createGroupboxElement">
        <parameter name="aLabel"/>
        <body>
          <![CDATA[
            var groupbox = null;
            var caption  = null;

            groupbox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "groupbox");
            groupbox.setAttribute("orient", "vertical");

            caption  = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "caption");
            caption.setAttribute("label", aLabel);

            groupbox.appendChild(caption);

            return groupbox;
          ]]>
        </body>
      </method>

      <method name="__createPersonConstructBox">
        <parameter name="aPersonConstruct"/>
        <body>
          <![CDATA[
            var personBox = null;
            var element   = null;

            personBox = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");

            if (aPersonConstruct.name) {
                element = this.__createDescriptionElement("atom-person-name");
                element.setAttribute("value", aPersonConstruct.name);

                personBox.appendChild(element);
            }

            if (aPersonConstruct.email) {
                element = this.__createURIDescriptionElement("atom-person-email", "mailto:" + aPersonConstruct.email, aPersonConstruct.email);

                personBox.appendChild(element);
            }

            if (aPersonConstruct.uri) {
                element = this.__createURIDescriptionElement("atom-person-uri", aPersonConstruct.uri.spec, aPersonConstruct.uri.spec);

                personBox.appendChild(element);
            }

            return personBox;
          ]]>
        </body>
      </method>

      <method name="__createSeparatorElement">
        <parameter name="aClass"/>
        <body>
          <![CDATA[
            var separator = null;

            separator = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "separator");
            separator.setAttribute("class", aClass);

            return separator;
          ]]>
        </body>
      </method>

      <method name="__createDescriptionElement">
        <parameter name="aClass"/>
        <body>
          <![CDATA[
            var description = null;

            description = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "description");
            description.setAttribute("class", aClass);

            return description;
          ]]>
        </body>
      </method>

      <method name="__createURIDescriptionElement">
        <parameter name="aClass"/>
        <parameter name="aURI"/>
        <parameter name="aLabel"/>
        <body>
          <![CDATA[
            var description = null;
            var link        = null;

            description = this.__createDescriptionElement(aClass);

            link = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
            link.setAttribute("href", aURI);
            link.setAttribute("target", "_blank");
            link.appendChild(document.createTextNode(aLabel));

            description.appendChild(link);

            return description;
          ]]>
        </body>
      </method>

      <method name="__createSimpleTextDescriptionElement">
        <parameter name="aClass"/>
        <parameter name="aText"/>
        <body>
          <![CDATA[
            var description = null;

            description = this.__createDescriptionElement(aClass);
            description.appendChild(document.createTextNode(aText));

            return description;
          ]]>
        </body>
      </method>

      <method name="__createLabelledBoxElement">
        <parameter name="aLabel"/>
        <body>
          <![CDATA[
            var box   = null;
            var label = null;

            box   = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "hbox");

            label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
            label.setAttribute("class", "atom-label");
            label.setAttribute("value", aLabel);

            box.appendChild(label);

            return box;
          ]]>
        </body>
      </method>

      <method name="__createCategoryDescriptionElement">
        <parameter name="aCategories"/>
        <body>
          <![CDATA[
            var description    = null;
            var categoriesText = "";

            description = this.__createDescriptionElement(aClass);

            for (var i = 0; i < aCategories.length; i++) {
                if (aCategories[i].term && aCategories[i].term != "") {
                    categoriesText += aCategories[i].term;
                }

                if (i + 1 != aCategories.length)
                    categoriesText += ", ";
            }

            description.appendChild(document.createTextNode(categoriesText));

            return description;
          ]]>
        </body>
      </method>

      <method name="showSidebarContent">
        <parameter name="aShowContent"/>
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.showSidebarContent(\"" + aShowContent + "\") invoked\n");

          if (aShowContent) {
              document.getElementById("uiYulupAtomSidebarContentDeck").selectedIndex = 0;
          } else {
              document.getElementById("uiYulupAtomSidebarContentDeck").selectedIndex = 1;
          }
        </body>
      </method>

      <method name="showFeed">
        <parameter name="aShowFeed"/>
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.showFeed(\"" + aShowFeed + "\") invoked\n");

          if (aShowFeed) {
              document.getElementById("uiYulupAtomSidebarDeck").selectedIndex = 0;

              // inform Yulup menu that we have a feed selected
              this.feedSelected(true);
          } else {
              document.getElementById("uiYulupAtomSidebarDeck").selectedIndex = 1;

              // inform Yulup menu that we don't have a feed
              this.feedSelected(false);
          }
        </body>
      </method>

      <method name="showEntries">
        <parameter name="aShowEntries"/>
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.showEntries(\"" + aShowEntries + "\") invoked\n");

          if (aShowEntries) {
              document.getElementById("uiYulupAtomSidebarFeedEntriesDeck").selectedIndex = 0;
              document.getElementById("uiYulupAtomSidebarSearchBox").removeAttribute("hidden");
          } else {
              document.getElementById("uiYulupAtomSidebarSearchBox").setAttribute("hidden", "true");
              document.getElementById("uiYulupAtomSidebarFeedEntriesDeck").selectedIndex = 1;
          }
        </body>
      </method>

      <method name="showLoading">
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.showLoading() invoked\n");

          document.getElementById("uiYulupAtomSidebarDeck").selectedIndex = 2;

          // start throbber
          document.getElementById("uiYulupAtomSidebarFeedLoadingThrobber").setAttribute("busy", "true");
        </body>
      </method>

      <method name="feedSelected">
        <parameter name="aFeedSelected"/>
        <body>
          /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar.feedSelected(\"" + aFeedSelected + "\") invoked\n");

          if (aFeedSelected) {
              AtomSidebar.mainBrowserWindow.document.getElementById("command_yulup_newatomentry").setAttribute("disabled", "false");
          } else {
              AtomSidebar.mainBrowserWindow.document.getElementById("command_yulup_newatomentry").setAttribute("disabled", "true");
          }
        </body>
      </method>
    </implementation>
  </binding>


  <!-- Binding for the Atom entries treeview. -->
  <binding id="atomentriestreeview"
           extends="chrome://global/content/bindings/tree.xml#tree">
    <implementation>
      <method name="searchEntry">
        <parameter name="aSearchString"/>
        <body>
          <![CDATA[
            firstResult = null;

            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomentriestreeview.searchEntry(\"" + aSearchString + "\") invoked\n");

            if (aSearchString && aSearchString != "") {
                if (this.view) {
                    // clear current selection
                    this.view.selection.clearSelection();

                    for (var i = 0; i < this.view.rowCount; i++) {
                        if (this.view.getCellText(i, { id: "titleColumn" }).indexOf(aSearchString) != -1) {
                            /* DEBUG */ dump("Yulup:atomsidebar.xml:atomentriestreeview.searchEntry: search string found in row \"" + i + "\"\n");
                            // add this row to the selection
                            this.view.selection.rangedSelect(i, i, true);

                            if (!firstResult)
                                firstResult = i;
                        }
                    }

                    if (firstResult)
                        this.view.selection.currentIndex = firstResult;
                }
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
