Todo
====
 * editor.xml:
    - background color for wysiwyg view should be fetched from browser.display.background_color pref

 * editor.js:
    - localize file picker strings by using property files

 * model.js:
    - isDirty() should return false if document has not been modified since last persisting

 * model.js:
    - set base URI directly on contained ducument root node

 * General directions:
    - think about serialising concurrent upload requests of the same resource (especially important with Atom documents, where we don't want to have two POST requests just because the first one hadn't yet finished and therefore has not yet returned a member URI).
    - nativescrollbar
    - view separation, editor dir structure
    - tag inserter: focus in textbox onload handler
    - look at editor and iframe bindings
    - set cursor by clicking anywhere, look at positioning code
    - nsIRequest::LOAD_BACKGROUND prevents throbber from becoming active

Notes
=====
 * myEditor.contentWindow.scrollY = myEditor.contentWindow.scrollMaxY;
 * http://lxr.mozilla.org/mozilla1.8.0/source/editor/libeditor/text/nsPlaintextEditor.cpp#738: mRules == null
   http://lxr.mozilla.org/mozilla1.8.0/source/editor/libeditor/text/nsTextEditRules.cpp#78 does not seem to get called
   solution: setTimeout and use callback 3-semaphore.
 * Use a range's createContextualFragment() to parse text/html.
 * domserialiser: remove editor bogus nodes completely, not only the attribute!

Snippets
========
/* Parse the args string contained in the search part
 * of the current URI. */
//argsStringRegExp = new RegExp("p=(.*?)&uri=(.*)");
//argsArray = argsStringRegExp.exec(window.location.search.slice(1));

/* Note that the matched results start at index 1, index 0
 * contains the not matched strings (not what we want). */
//argParam = argsArray[1];
//argURI   = argsArray[2];


// hook up EditorObserver
//this.editorImpl.addEditorObserver(new View.EditorObserver());


// install a command controller context for the editor
//commandControllerContext = Components.classes["@mozilla.org/embedcomp/base-command-controller;1"].createInstance(Components.interfaces.nsIControllerContext);

//commandControllerContext.init(null);
//commandControllerContext.setCommandContext(sourceEditor);

//sourceEditor.contentWindow.controllers.insertControllerAt(0, commandControllerContext);

// install the command table
//commandTable = commandControllerContext.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIControllerCommandTable);
// commandTable.registerCommand("cmd_find", nsFindCommand);


/*
// flags according to nsIDocumentEncoder
return this.view.outputToString("text/html", (NSIDOCENC_OutputRaw |
NSIDOCENC_OutputNoScriptContent |
NSIDOCENC_OutputNoFramesContent));
*/

//window.setTimeout(function (aSelf) { aSelf.setUp(); }, 1000, this.sourceModeView);


/* TODO: the setTimeout() is an ugly hack and must die! The idea is to use
 * semaphores to synchronise the element initialization. Unfortunately,
 * you can't create semaphores with JavaScript which are sound, therefore
 * we have to wait until this stuff is moved to C++ and we can use the
 * NSPR and its synchronisation primitives. */


<constructor>
        var feedInformationXSL = null;

        /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar() invoked\n");

        try {
            feedInformationXSL = Components.classes["@mozilla.org/xml/xml-document;1"].createInstance(Components.interfaces.nsIDOMXMLDocument);

            if (!feedInformationXSL.load("chrome://yulup/content/atomfeedinformation.xsl")) {
                /* DEBUG */ dump("Yulup:atomsidebar.xml:atomsidebar: failed tot load XSLT from URI chrome://yulup/content/atomfeedinformation.xsl\n");
                feedInformationXSL = null;
            }

            this.feedInformationXSL = feedInformationXSL;
        } catch (exception) {
            /* DEBUG */ YulupDebug.dumpExceptionToConsole("Yulup:atomsidebar.xml:atomsidebar", exception);
            Components.utils.reportError(exception);
        }
      </constructor>

var strBundleService = Components.classes["@mozilla.org/intl/stringbundle;1"]
                                 .getService(Components.interfaces.nsIStringBundleService);
var strbundle = strBundleService.createBundle("chrome://mozpod/locale/mozpod.properties");
var stringArray = Array(strbundle.GetStringFromName("iPodDetected"),
                        strbundle.GetStringFromName("performingSync"),
                        strbundle.GetStringFromName("iPodSyncSuccess"),
                        strbundle.GetStringFromName("iPodUpToDate")
);

// Events
window.addEventListener("load", startup, false);
window.addEventListener("unload", shutdown, false);


> Does scrollIntoView work in xul?  I am using firefox 1.5.0.6 and not having any luck.

No, as scrollIntoView is implemented for HTML elements only.

However, if you used a <scrollbox>, you could use the box object's ensureElementIsVisible method. 


Well I found the solution, the event is "onclose"

<window onclose="return confirmClose();">

function confirmClose() {
     if (confirm ("You want to close?")) {
        return true,
     } else {
        return false;
     }
}


A lexed symbol can have multiple types: e.g. the literal "div" should have type IDENT and type DIV. (Create a post-processing step after lexing IDENTs to identify DIVs, MODs, etc.).

Alternatively, only produce IDENTs during lexing, and during parsing have special function matchDIV, matchMOD, or matchMULTIPLICATIVEOPERATOR to distinguish these tokens.


+            // remove default override stylesheet
+            this.view.QueryInterface(Components.interfaces.nsIEditorStyleSheets);
+            this.view.removeOverrideStyleSheet("resource:/res/EditorOverride.css");
+
+            this.view.QueryInterface(Components.interfaces.nsIHTMLEditor);
+



            case "upload":
              if (gEditorController.editorParams.navigation && gEditorController.editorParams.navigation.sitetree.uri) {
                  ResourceUploadDialogHandler.showResourceUploadDialog(gEditorController.editorParams.navigation.sitetree.uri);
              }
            break;
