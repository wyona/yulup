<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>

<window id="uiEditorWindow"
        orient="vertical"
        align="stretch"
        onload="initEditor()"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="application/x-javascript">
<![CDATA[
    // NOTE: for how to install a selection-listener, see http://lxr.mozilla.org/mozilla1.8.0/source/toolkit/components/viewsource/content/viewSource.js#219

    const INSERT_TAB_STRING = "  ";
    const XUL_NAMESPACE_URI = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

    var gEditorElem    = null;
    var gEditor        = null;
    var gTagPrompter   = null;
    var gCaretReadonly = false;

    function initEditor() {
        dump("######## YulupTEST:taginserter-test.js:initEditor() invoked\n");
        // test dynamic tab insertion
        var editorHbox = null;
        var editorElem = null;

        gTagPrompter = new TagInserter(document, document.getElementById("uiPromptBox"));

        editorElem = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "editor");
        editorElem.setAttribute("type", "content");
        editorElem.setAttribute("flex", "1");
        editorElem.setAttribute("style", "border: 2px solid black; margin: 2px 2px 2px 2px;");
        editorElem.setAttribute("onload", "event.stopPropagation()");

        editorHbox = document.getElementById("uiEditorHbox");
        editorHbox.appendChild(editorElem);

        gEditorElem = editorElem;

        window.setTimeout(continueInit, 100);
    }

    function continueInit() {
        dump("######## YulupTEST:taginserter-test.js:continueInit() invoked (chocked initialisation)\n");

        var editorElem          = gEditorElem;
        var selectionController = null;

        // set up
        editorElem.makeEditable("text", false);

        gEditor = editorElem.getEditor(editorElem.contentWindow);
        gEditor.QueryInterface(Components.interfaces.nsIEditor);

        gEditor.enableUndo(true);
        gEditor.rootElement.style.fontFamily = "-moz-fixed";
        gEditor.rootElement.style.whiteSpace = "pre";
        gEditor.rootElement.style.margin = 0;

        // hook up EditActionListener
        gEditor.addEditActionListener(new EditActionListener());

        //gEditor.rootElement.addEventListener("keypress", function (event) { event.preventBubble(); }, true);

        // make the caret visible even if the current selection is not collapsed
        selectionController = gEditor.selectionController;
        selectionController.setCaretVisibilityDuringSelection(true);

        gEditor.QueryInterface(Components.interfaces.nsIPlaintextEditor);

        // hook up TextEditorKeyListener
        //gSpecialKeyBindingsHandler = readlineKeyBindingsHandler;
        editorElem.contentWindow.addEventListener("keypress", new ReadlineKeyBindingsListener(editorElem, gEditor), true);

        dump("editorElem status = \"" + editorElem.editingSession.editorStatus  + "\"\n");
        dump("is editable = \"" + gEditor.isDocumentEditable  + "\"\n");
    }

    function TagInserter(aXULDocument, aPromptContainer) {
        this.xulDocument     = aXULDocument;
        this.promptContainer = aPromptContainer;
        this.promptStage     = this.PROMPT_STAGE_UNITIALISED;
    }

    TagInserter.prototype = {
        PROMPT_STAGE_UNITIALISED: 0,
        PROMPT_STAGE_TAGNAME    : 1,
        PROMPT_STAGE_ATTRNAME   : 2,
        PROMPT_STAGE_ATTRVALUE  : 3,
        PROMPT_STAGE_EMPTYTAG   : 4,

        xulDocument    : null,
        promptContainer: null,
        promptTextBox  : null,
        promptStage    : null,
        callback       : null,
        tagName        : null,
        newTag         : null,

        startTagPrompting: function (aCallback) {
            var promptLabel   = null;
            var promptTextBox = null;

            dump("######## YulupTEST:taginserter-test.js:promptTag(\"" + aCallback + "\") invoked\n");

            this.callback      = aCallback;
            this.promptTextBox = null;
            this.tagName       = "";
            this.newTag        = "";

            if (this.promptStage != this.PROMPT_STAGE_UNITIALISED) {
                // something must have gone wrong during the last time, do some cleanup
                this.clearPromptBox();
            } else {
                // everything ok, let's go
                this.promptStage = this.PROMPT_STAGE_TAGNAME;
            }

            // prompt for tag name
            promptLabel = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "label");
            promptLabel.setAttribute("value", "Element name:");
            promptLabel.setAttribute("style", "font-weight: bolder;");
            promptLabel.setAttribute("control", "uiPromptBoxTextbox");

            promptTextBox = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "textbox");
            promptTextBox.setAttribute("id", "uiPromptBoxTextbox");
            promptTextBox.setAttribute("flex", "1");
            promptTextBox.addEventListener("keypress", this, true);

            this.promptTextBox = promptTextBox;

            this.promptContainer.appendChild(this.createAbortButton());
            this.promptContainer.appendChild(promptLabel);
            this.promptContainer.appendChild(promptTextBox);
            this.promptContainer.removeAttribute("hidden");

            this.promptTextBox.focus();
        },

        promptAttributeName: function () {
            var promptLabel   = null;
            var promptTextBox = null;

            dump("######## YulupTEST:taginserter-test.js:promptAttributeName() invoked\n");

            this.clearPromptBox();

            this.promptTextBox = null;
            this.promptStage = this.PROMPT_STAGE_ATTRNAME;

            // prompt for attribute name
            promptLabel = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "label");
            promptLabel.setAttribute("value", "Attribute name:");
            promptLabel.setAttribute("style", "font-weight: bolder;");
            promptLabel.setAttribute("control", "uiPromptBoxTextbox");

            promptTextBox = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "textbox");
            promptTextBox.setAttribute("id", "uiPromptBoxTextbox");
            promptTextBox.setAttribute("flex", "1");
            promptTextBox.addEventListener("keypress", this, true);

            this.promptTextBox = promptTextBox;

            this.promptContainer.appendChild(this.createAbortButton());
            this.promptContainer.appendChild(promptLabel);
            this.promptContainer.appendChild(promptTextBox);
            this.promptContainer.removeAttribute("hidden");

            this.promptTextBox.focus();
        },

        promptAttributeValue: function () {
            var promptLabel   = null;
            var promptTextBox = null;

            dump("######## YulupTEST:taginserter-test.js:promptAttributeValue() invoked\n");

            this.clearPromptBox();

            this.promptTextBox = null;
            this.promptStage = this.PROMPT_STAGE_ATTRVALUE;

            // prompt for attribute value
            promptLabel = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "label");
            promptLabel.setAttribute("value", "Attribute value:");
            promptLabel.setAttribute("style", "font-weight: bolder;");
            promptLabel.setAttribute("control", "uiPromptBoxTextbox");

            promptTextBox = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "textbox");
            promptTextBox.setAttribute("id", "uiPromptBoxTextbox");
            promptTextBox.setAttribute("flex", "1");
            promptTextBox.addEventListener("keypress", this, true);

            this.promptTextBox = promptTextBox;

            this.promptContainer.appendChild(this.createAbortButton());
            this.promptContainer.appendChild(promptLabel);
            this.promptContainer.appendChild(promptTextBox);
            this.promptContainer.removeAttribute("hidden");

            this.promptTextBox.focus();
        },

        promptEmptyTag: function () {
            var promptLabel               = null;
            var promptEmptyTagFalseButton = null;
            var promptEmptyTagTrueButton  = null;

            dump("######## YulupTEST:taginserter-test.js:promptEmptyTag() invoked\n");

            this.clearPromptBox();

            this.promptTextBox = null;
            this.promptStage = this.PROMPT_STAGE_EMPTYTAG;

            // prompt for empty tag
            promptLabel = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "label");
            promptLabel.setAttribute("value", "Create:");
            promptLabel.setAttribute("style", "font-weight: bolder;");

            promptEmptyTagFalseButton = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "button");
            promptEmptyTagFalseButton.setAttribute("label", "Non-empty Tag");
            promptEmptyTagFalseButton.setAttribute("id", "uiPromptBoxNonEmptyButton");
            promptEmptyTagFalseButton.addEventListener("command", this, true);

            promptEmptyTagTrueButton = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "button");
            promptEmptyTagTrueButton.setAttribute("label", "Empty Tag");
            promptEmptyTagTrueButton.setAttribute("id", "uiPromptBoxEmptyButton");
            promptEmptyTagTrueButton.addEventListener("command", this, true);

            this.promptContainer.appendChild(this.createAbortButton());
            this.promptContainer.appendChild(promptLabel);
            this.promptContainer.appendChild(promptEmptyTagFalseButton);
            this.promptContainer.appendChild(promptEmptyTagTrueButton);
            this.promptContainer.removeAttribute("hidden");

            promptEmptyTagFalseButton.focus();
        },

        finishPrompting: function (aReturnString) {
            dump("######## YulupTEST:taginserter-test.js:finishPrompting() invoked\n");

            this.clearPromptBox();

            this.promptStage = this.PROMPT_STAGE_UNITIALISED;

            // return to caller
            this.callback(aReturnString);
        },

        clearPromptBox: function () {
            this.promptContainer.setAttribute("hidden", "true");

            while(this.promptContainer.hasChildNodes())
                this.promptContainer.removeChild(this.promptContainer.firstChild);
        },

        createAbortButton: function () {
            var abortButton = null;

            abortButton = this.xulDocument.createElementNS(XUL_NAMESPACE_URI, "button");
            //abortButton.setAttribute("image", "chrome://global/skin/icons/closetab.png");
            abortButton.setAttribute("label", "Abort");
            abortButton.setAttribute("id", "uiPromptBoxAbortButton");
            abortButton.addEventListener("command", this, true);

            return abortButton;
        },

        handleEvent: function (aEvent) {
            var enteredText = null;

            dump("######## YulupTEST:taginserter-test.js:handleEvent(\"" + aEvent + "\") invoked\n");

            if (aEvent.type == "keypress") {
                if (aEvent.keyCode == Components.interfaces.nsIDOMKeyEvent.DOM_VK_RETURN ||
                    aEvent.keyCode == Components.interfaces.nsIDOMKeyEvent.DOM_VK_ENTER) {
                    // get entered text
                    enteredText = this.promptTextBox.value;

                    // dispatch to next stage

                    /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:handleEvent: current prompt stage = \"" + this.promptStage + "\" (keypress event)\n");

                    switch (this.promptStage) {
                    case this.PROMPT_STAGE_TAGNAME:
                        // handle entered text
                        if (enteredText == "") {
                            // nothing entered means directly abort prompting
                            this.finishPrompting(null);
                        } else {
                            // add it to the new tag string
                            this.tagName  = enteredText;
                            this.newTag  += "<" + enteredText;

                            // enter next stage
                            this.promptAttributeName();
                        }
                        break;
                    case this.PROMPT_STAGE_ATTRNAME:
                        // handle entered text
                        if (enteredText == "") {
                            // nothing entered means abort prompting for attributes
                            this.promptEmptyTag();
                        } else {
                            // add it to the new tag string
                            this.newTag += " " + enteredText + "=";

                            // enter next stage
                            this.promptAttributeValue();
                        }
                        break;
                    case this.PROMPT_STAGE_ATTRVALUE:
                        // handle entered text
                        this.newTag += "\"" + enteredText + "\"";

                        // enter next stage
                        this.promptAttributeName();
                        break;
                    default:
                    }
                }
            } else if (aEvent.type == "command") {
                /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:handleEvent: current prompt stage = \"" + this.promptStage + "\" (command event)\n");

                switch (aEvent.target.getAttribute("id")) {
                case "uiPromptBoxAbortButton":
                    this.finishPrompting(null);
                    break;
                case "uiPromptBoxNonEmptyButton":
                    this.newTag += ">" + "</" + this.tagName + ">";
                    this.finishPrompting(this.newTag);
                    break;
                case "uiPromptBoxEmptyButton":
                    this.newTag += "/>";
                    this.finishPrompting(this.newTag);
                    break;
                default:
                }
            }
        }
    }

    function insertTag() {
        dump("######## YulupTEST:taginserter-test.js:insertTag() invoked\n");

        gTagPrompter.startTagPrompting(insertTagFinished);
    }

    function insertTagFinished(aInsertString) {
        dump("######## YulupTEST:taginserter-test.js:insertTagFinished(\"" + aInsertString + "\") invoked\n");
    }

    /**
     * Keypress listener.
     *
     * Note that this method basically mimics as much as necessary of the
     * nsTextEditorKeyListener::KeyPress method from nsEditorEventListeners.cpp
     * (see http://lxr.mozilla.org/mozilla1.8.0/source/editor/libeditor/text/nsEditorEventListeners.cpp).
     *
     * See also https://bugzilla.mozilla.org/attachment.cgi?id=227048 of bug
     * https://bugzilla.mozilla.org/show_bug.cgi?id=237964 for how to
     * handle "protected" nodes.
     *
     * TODO: should we map NS_OK to return true and everything else to return false?
     *
     * How editor event handling works (see also: http://developer.mozilla.org/en/docs/Using_the_Editor_from_XUL):
     *
     * Editing operations happen in response to user events: mouse, key, drag and drop, and
     * IME (international text input) events. In order to receive these events, the editor
     * registers several event listeners on the document being edited. In addition, editor
     * actions in the user interface are propagated via the XUL and JavaScript, and call
     * methods on the nsEditorShell. This editor command dispatching is described separately.
     *
     * The following event listeners are registered:
     *   * In nsHTMLEditor::InstallEventListeners(), we install the following. These get
     *     installed for all types of editor (i.e. for text widgets and composer):
     *       o nsTextEditorKeyListener (as a nsIDOMKeyListener)
     *       o nsTextEditorMouseListener (as a nsIDOMMouseListener)
     *       o nsTextEditorFocusListener (as a nsIDOMFocusListener)
     *       o nsTextEditorTextListener (as a nsIDOMTextListener)
     *       o nsTextEditorCompositionListener (as a nsIDOMCompositionListener)
     *       o nsTextEditorDragListener (as a nsIDOMDragListener)
     *   * In nsEditorShell::PrepareDocumentForEditing(), we install a mouse listener. This
     *     only happens for situations where the nsEditorShell is used (i.e. not for text widgets):
     *       o nsEditorShellMouseListener (as a nsIDOMMouseListener)
     *
     * nsTextEditorKeyListener:
     *   This event listener handles key presses for typing, and other editing operations (backspace,
     *   delete, enter/return). Cases that it does not handle explicitly it passes on to
     *   nsHTMLEditor::EditorKeyPress(), which is where normal typing keys end up. Note that it only
     *   responds to the KeyPress event; KeyDown and KeyUp events are ignored.
     *
     * So what happens to a key press once it's got to the nsTextEditorKeyListener? How does that end
     * up in the document? Let's trace through.
     *   * nsTextEditorKeyListener::KeyPress() gets the key press event. For normal character keys,
     *     that falls into nsHTMLEditor::EditorKeyPress().
     *   * nsHTMLEditor::EditorKeyPress() gets the character code from the key event, puts that into
     *     a string, and calls nsHTMLEditor::TypedText(), which simply calls nsHTMLEditor::InsertText().
     *   * nsHTMLEditor::InsertText() hides quite a bit of complexity in some stack-based classes.
     *
     *     nsAutoPlaceHolderBatch is a utility class that wraps text insertion with calls to turn off
     *     selection and layout updating (to avoid flicker), and the maintenance of a placeholder
     *     transaction. This placeholder transaction enables us to batch typing events together, so that
     *     an Undo undoes the whole series of keystrokes.
     *
     *     Another stack-based class, nsAutoRules, ensures that text insertion is wrapped with calls
     *     to nsHTMLEditor::StartOperation() / EndOperation(). These functions call BeforeEdit() and
     *     AfterEdit() on the current typing rules.
     *
     *     Now, we initialize a nsTextRulesInfo with the information about the string being inserted,
     *     and call WillDoAction() on the current [writing-rules.html editing rules]. Because the
     *     implementation of inserting text differs between the different rules (plain text vs. HTML,
     *     for example), it is handled entirely by the rules code, in the WillDoAction()call.
     *
     *     In Composer, we are using nsHTMLEditRules, so we end up in nsHTMLEditRules::WillDoAction().
     *     For text insertion, this drops into nsHTMLEditRules::WillInsertText(). This code first deletes
     *     the selection if there is one (e.g. you are typing over selected text), then calls a generic
     *     pre-insertion call WillInsert(), which sets up inline styles for the inserted text, and moves
     *     the selection to an appropriate place where the text is to be inserted.
     *
     *     Now we are ready to actually insert the text. Recall that we're going through a generic
     *     InsertText() call, so this code deals with pasting long strings, as well as inserting single
     *     characters. The code thus has to do the correct thing with linebreaks, so has a special case
     *     for inserting into <pre> sections. We call into the normal insertion code, which loops through
     *     the input string looking for linebreaks, and inserts each text run, followed by a <br> when
     *     necessary. When handling key presses, this will just insert a single character.
     *
     *     We fall out of the WillDoAction() call, and drop into WillDoAction(), which, for text insertion,
     *     does nothing.
     *
     *     The last thing that happens on a keypress is that nsTextEditorKeyListener::KeyPress() calls
     *     ScrollSelectionIntoView(), which, as the name suggests, ensures that the text that was just
     *     entered is visible.
     *
     * @param  {nsIDOMEvent} aEvent
     * @return {Boolean}
     */
    function textEditorKeyListener(aEvent) {
        var keyEvent                 = null;
        var keyCode                  = null;
        var charCode                 = null;
        var editorFlags              = null;
        var isAnyModifierKeyButShift = null;
        var isShiftModifierKey       = null;

        dump("event type = \"" + aEvent.type + "\"\n");
        dump("selection  = \"" + gEditor.selection + "\"\n");

        // prevent keypress events from invoking FAYT
        aEvent.preventBubble();

        keyEvent = aEvent.QueryInterface(Components.interfaces.nsIDOMKeyEvent);

        keyCode  = keyEvent.keyCode;
        charCode = keyEvent.charCode;

        // if we are readonly or disabled, then do nothing.

        gEditor.QueryInterface(Components.interfaces.nsIEditor);

        editorFlags = gEditor.flags;

        if (editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorReadonlyMask ||
            editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorDisabledMask)
            return true;

        /* If there is no charCode, then it's a key that doesn't map to a character,
         * so look for special keys using keyCode. */
        if (0 != keyCode) {
            isAnyModifierKeyButShift = keyEvent.altKey;

            if (!isAnyModifierKeyButShift) {
                isAnyModifierKeyButShift = keyEvent.metaKey;

                if (!isAnyModifierKeyButShift) {
                    isAnyModifierKeyButShift = keyEvent.ctrlKey;
                }
            }

            switch (keyCode) {
                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_META:
                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_SHIFT:
                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_CONTROL:
                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_ALT:
                    dump("key event = DOM_VK_META, DOM_VK_SHIFT, DOM_VK_CONTROL, DOM_VK_ALT\n");

                    // we consumed this event
                    aEvent.preventDefault();
                    return true;
                    break;

                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_BACK_SPACE:
                    dump("key event = DOM_VK_BACK_SPACE\n");

                    if (isAnyModifierKeyButShift)
                        return true;

                    gEditor.deleteSelection(Components.interfaces.nsIEditor.ePrevious);

                    // we consumed this event
                    aEvent.preventDefault();
                    return true;
                    break;

                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_DELETE:
                    dump("key event = DOM_VK_DELETE\n");

                    /* On certain platforms (such as windows) the shift key
                     * modifies what delete does (cmd_cut in this case).
                     * Bailing here to allow the keybindings to do the cut.*/
                    isShiftModifierKey = keyEvent.shiftKey;

                    if (isAnyModifierKeyButShift || isShiftModifierKey)
                        return true;

                    gEditor.deleteSelection(Components.interfaces.nsIEditor.eNext);

                    // we consumed this event
                    aEvent.preventDefault();
                    return true;
                    break;

                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_TAB:
                    dump("key event = DOM_VK_TAB\n");

                    if ((editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorSingleLineMask) ||
                        (editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorPasswordMask)   ||
                        (editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorWidgetMask))
                        return true;

                    if (isAnyModifierKeyButShift)
                        return true;

                    // else we insert the tab straight through
                    gEditor.QueryInterface(Components.interfaces.nsIPlaintextEditor);
                    gEditor.insertText(INSERT_TAB_STRING);

                    // we consumed this event
                    aEvent.preventDefault();
                    return true;
                    break;

                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_RETURN:
                case Components.interfaces.nsIDOMKeyEvent.DOM_VK_ENTER:
                    dump("key event = DOM_VK_RETURN, DOM_VK_ENTER\n");

                    if (isAnyModifierKeyButShift)
                        return true;

                    if (!(editorFlags & Components.interfaces.nsIPlaintextEditor.eEditorSingleLineMask)) {
                        gEditor.QueryInterface(Components.interfaces.nsIPlaintextEditor);
                        gEditor.handleKeyPress(keyEvent);

                        // we consumed the event
                        aEvent.preventDefault();
                    }

                    return true;
            }
        }

        dump("unhandled key event = " + keyCode + "\n");

        // check the character code and return if handled
        if (gSpecialKeyBindingsHandler(keyEvent, gEditor))
            return true;

        dump("unhandled char code = " + charCode + "\n");

        gEditor.QueryInterface(Components.interfaces.nsIPlaintextEditor);
        gEditor.handleKeyPress(aEvent);

        // we don't PreventDefault() here or keybindings like control-x won't work
        return true;
    }


    function ReadlineKeyBindingsListener(aEditorElem, aEditor, aControllers) {
        dump("######## YulupTEST:taginserter-test.js:ReadlineKeyBindingsListener() invoked\n");

        this.editorElem  = aEditorElem;
        this.editor      = aEditor;
        this.controllers = aControllers;
    }

    ReadlineKeyBindingsListener.prototype = {
        editorElem       : null,
        editor           : null,
        commandController: null,

        handleEvent: function (aKeyEvent) {
            var moveController = null;

            dump("######## YulupTEST:taginserter-test.js:ReadlineKeyBindingsListener:handleEvent() invoked\n");

            // prevent keypress events from invoking FAYT
            aKeyEvent.preventBubble();

            switch (String.fromCharCode(aKeyEvent.charCode)) {
            case "b":
            case "B":
                dump("char code = b\n");
                if (!aKeyEvent.ctrlKey) {
                    break;
                } else {
                    moveController = this.editorElem.contentWindow.controllers.getControllerForCommand("cmd_charPrevious");
                    moveController.doCommand("cmd_charPrevious");

                    // we consumed this event
                    aKeyEvent.preventDefault();
                    return true;
                    break;
                }
            case "d":
                dump("char code = d\n");
                if (!aKeyEvent.ctrlKey) {
                    break;
                } else {
                    this.sendNewKeyEvent(aKeyEvent, Components.interfaces.nsIDOMKeyEvent.DOM_VK_DELETE, 0);

                    // we consumed this event
                    aKeyEvent.preventDefault();
                    return true;
                    break;
                }
            case "f":
            case "F":
                dump("char code = f\n");
                if (!aKeyEvent.ctrlKey) {
                    break;
                } else {
                    if (aKeyEvent.shiftKey) {
                        this.editor.selectionController.characterMove(true, true);
                    } else {
                        this.editor.selectionController.characterMove(true, false);
                    }

                    // we consumed this event
                    aKeyEvent.preventDefault();
                    return true;
                    break;
                }
            case "n":
            case "N":
                dump("char code = n\n");
                if (!aKeyEvent.ctrlKey) {
                    break;
                } else {
                    if (aKeyEvent.shiftKey) {
                        this.editor.selectionController.lineMove(true, true);
                    } else {
                        this.editor.selectionController.lineMove(true, false);
                    }

                    // we consumed this event
                    aKeyEvent.preventDefault();
                    return true;
                    break;
                }
            case "p":
            case "P":
                dump("char code = p\n");
                if (!aKeyEvent.ctrlKey) {
                    break;
                } else {
                    if (aKeyEvent.shiftKey) {
                        this.editor.selectionController.lineMove(false, true);
                    } else {
                        this.editor.selectionController.lineMove(false, false);
                    }

                    // we consumed this event
                    aKeyEvent.preventDefault();
                    return true;
                    break;
                }
            }
        },

        sendNewKeyEvent: function (aReferenceEvent, aKeyCode, aCharCode) {
            var event = null;

            event = document.createEvent("KeyEvents");
            dump("Event created\n");

            event.initKeyEvent(aReferenceEvent.type, aReferenceEvent.canBubble, aReferenceEvent.cancelable, aReferenceEvent.view, false, false, false, false, aKeyCode, aCharCode);
            dump("Event initialised\n");

            this.editorElem.contentWindow.dispatchEvent(event);
            dump("Event dispatched\n");
        }
    }


    function fillEditor() {
        var documentString = "<html><head></head><body>Some editable text. <span>Some none-editable text.</span> Some editable text.</body>";

        dump("######## YulupTEST:taginserter-test.js:fillEditor() invoked\n");

        gEditor.selectAll();
        gEditor.deleteSelection(0);
        gEditor.beginningOfDocument();
        gEditor.insertText(documentString);
        gEditor.beginningOfDocument();
    }

    /**
     * EditActionListener constructor. Instantiates a new object of
     * type EditActionListener.
     *
     * Note that this type implements the nsIEditActionListener
     * interface.
     *
     * @constructor
     * @return {EditActionListener}
     */
    function EditActionListener() {
        /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:EditActionListener() invoked.\n");
    }

    EditActionListener.prototype = {
        WillCreateNode: function (aTag, aParent, aPosition) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillCreateNode: tag = \"" + aTag + "\", parent = \"" + aParent.nodeName + "\", position = \"" + aPosition + "\"\n");
        },

        DidCreateNode: function (aTag, aNode, aParent, aPosition, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidCreateNode:  tag = \"" + aTag + "\", parent = \"" + aParent.nodeName + "\", position = \"" + aPosition + "\", result = \"" + aResult + "\"\n");
        },

        WillInsertNode: function (aNode, aParent, aPosition) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillInsertNode: node = \"" + aNode.nodeName + "\", parent = \"" + aParent.nodeName + "\", position = \"" + aPosition + "\"\n");
        },

        DidInsertNode: function (aNode, aParent, aPosition, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidInsertNode:  node = \"" + aNode.nodeName + "\", parent = \"" + aParent.nodeName + "\", position = \"" + aPosition + "\", result = \"" + aResult + "\"\n");
        },

        WillDeleteNode: function (aChild) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillDeleteNode: child = \"" + aChild.nodeName + "\"\n");
        },

        DidDeleteNode: function (aChild, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidDeleteNode:  child = \"" + aChild.nodeName + "\", result = \"" + aResult + "\"\n");
        },

        WillSplitNode: function (aExistingRightNode, aOffset) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillSplitNode:  right node = \"" + aExistingRightNode.nodeName + "\", offset = \"" + aOffset + "\"\n");
        },

        DidSplitNode: function (aExistingRightNode, aOffset, aNewLeftNode, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidSplitNode:   right node = \"" + aExistingRightNode.nodeName + "\", offset = \"" + aOffset + "\", new left node = \"" + aNewLeftNode.nodeName + "\", result = \"" + aResult + "\"\n");
        },

        WillJoinNodes: function (aLeftNode, aRightNode, aParent) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillJoinNodes:  left node = \"" + aLeftNode.nodeName + "\", right node = \"" + aRightNode.nodeName + "\", parent node = \"" + aParent.nodeName + "\"\n");
        },

        DidJoinNodes: function (aLeftNode, aRightNode, aParent, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidJoinNodes:   left node = \"" + aLeftNode.nodeName + "\", right node = \"" + aRightNode.nodeName + "\", parent node = \"" + aParent.nodeName + "\", result = \"" + aResult + "\"\n");
        },

        WillInsertText: function (aTextNode, aOffset, aString) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillInsertText: text node = \"" + aTextNode.nodeName + "\", offset = \"" + aOffset + "\", string = \"" + aString + "\"\n");
        },

        DidInsertText: function (aTextNode, aOffset, aString, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidInsertText: text node = \"" + aTextNode.nodeName + "\", offset = \"" + aOffset + "\", string = \"" + aString + "\", result = \"" + aResult + "\"\n");
        },

        WillDeleteText: function (aTextNode, aOffset, aLength) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillDeleteText: text node = \"" + aTextNode.nodeName + "\", offset = \"" + aOffset + "\", length = \"" + aLength + "\"\n");
        },

        DidDeleteText: function (aTextNode, aOffset, aLength, aResult) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidDeleteText: text node = \"" + aTextNode.nodeName + "\", offset = \"" + aOffset + "\", length = \"" + aLength + "\", result = \"" + aResult + "\"\n");
        },

        WillDeleteSelection: function (aSelection) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:WillDeleteSelection: selection = \"" + aSelection + "\"\n");
        },

        DidDeleteSelection: function (aSelection) {
            /* DEBUG */ dump("######## YulupTEST:taginserter-test.js:DidDeleteSelection: selection = \"" + aSelection + "\"\n");
        }
    };
]]>
  </script>

  <button label="Fill Editor" oncommand="fillEditor()"/>
  <button label="Insert Tag" oncommand="insertTag()"/>
  <hbox id="uiEditorHbox" flex="1"/>
  <hbox id="uiPromptBox" align="center" style="border-top: 1px solid gray; font-size: x-small;" hidden="true"/>

</window>
